2005-10-02  Scott James Remnant  <scott@netsplit.com>

	* src/display.c (attrs): Make static.
	* src/display.h: Add missing newline between vars and functions.
	* src/live-f1.h: Add missing newline between vars and functions.
	* src/packet.c: Correct doc for event_id

	* src/display.c (open_display): Sets up the curses display,
	allocates colours, etc.
	(close_display): Tears down the curses environment again.
	(clear_board): Place holder function, will be used to clear the
	board at the start of an event; for now just schedules a window
	update with some cruft in it.
	(popup_message): Displays a popup message in front of everything
	else on the screen, with some evil window hackery.
	(close_popup): Takes the popup away again and makes sure it'll
	really vanish at the next update.
	* src/stream.c (next_packet): Null-terminate the payload for free
	to make dealing with strings marginally less painful.
	* src/stream.h: Fix bogus prototypes.
	* configure.ac: Add check for ncurses library.
	* src/display.h: Header file.
	* src/main.c (main): Close curses display on shutdown.
	(info): use popup_message when curses is running.
	* src/packet.c (handle_system_packet): Clear the board at the
	start of an event (opening curses display).  Take away the
	null-terminate code now they always are.
	* src/Makefile.am (live_f1_SOURCES): Add display.c and display.h.

2005-10-01  Scott James Remnant  <scott@netsplit.com>

	* src/packet.c (handle_system_packet): Add handling for
	SYS_COPYRIGHT and new SYS_NOTICE packets.
	
	* src/packet.c (handle_car_packet): Change packet parameter to
	a Packet structure rather than binary data.
	(handle_system_packet): Likewise and adjust code to match.
	* src/packet.h (Packet): Add a packet structure to hold a decoded
	packet and copy that about rather than binary evilness.  Update
	prototypes for functions.  Move macros back into src/stream.c now
	we don't move binary stuff around.
	* src/stream.c (next_packet): Rework to fill in a Packet structure
	as we go, and have it filled from the buffer when the entire packet
	is in there.  That way nothing passed this has to worry about
	whether an event was long, short, special or just down-right stupid.
	(parse_stream_block): Use a Packet struct on the stack to pass
	to next_packet and down to the handler functions.

	* README: Document the basics of encryption.

	* src/live-f1.h (CurrentState): Add the decryption salt to the
	state structure.
	* src/stream.c (reset_decryption): Add function to reset the
	decryption salt to the initial seed.
	(decrypt_bytes): Add the actual decryption algorithm.
	(next_packet): Record for each event type whether it needs
	decrypting or not, and decrypt it if it does.
	* src/stream.h: Update.
	* src/main.c (main): Set the decryption salt after clearing the
	state structure.
	* src/packet.c (handle_system_packet): Reset the decryption salt
	when receiving a key frame packet and after obtaining the key frame.
	(handle_system_packet): Reset the decryption salt after changing
	the key.

	* src/live-f1.h (CurrentState): Remove http session stuff from
	CurrentState, because we actually can't make multiple requests
	on the same session so will need a new one each time anyway.
	Also remove data_sock, it's not needed.
	(EventType): Add enum for possible event types.
	* src/main.c (main): Store the socket in an old-fashioned int
	and pass to read_stream again.  Drop session creation.
	* src/stream.c (read_stream): Take sock again.
	* src/stream.h: Update.
	* src/http.c (obtain_auth_cookie): Remove http_sess parameter and
	instead set it up and tear it down in the function.
	(obtain_decryption_key): Likewise.
	(obtain_key_frame): Likewise.
	* src/http.h: Update.
	* src/packet.c (handle_system_packet): No longer pass session to
	obtain_decryption_key() or obtain_key_frame().  Store event number
	and type in the state struct.

	* src/live-f1.h (CurrentState): Add a structure that we can
	pass around with our state rather than using globals or other
	evil things.
	* src/main.c (main): Rework to setup the CurrentState struct
	and pass it about.
	* src/packet.c (handle_car_packet): Add a stub function for 
	handling car-related packets when we get around to it.
	(handle_system_packet): Add a function for handling system
	packets, and handle the SYS_EVENT_ID and SYS_KEY_FRAME ones.
	* src/stream.c (parse_stream_block): Make a copy of the packet
	on the stack so we can be recursive and hand the packet off to
	either handle_car_packet() or handle_system_packet().
	(read_stream): Modify to just take CurrentState pointer.
	(parse_stream_block): Modify to take CurrentState pointer
	instead of ne_session pointer.

	* src/packet.h (CarPacketType, SystemPacketType): Move enums
	and related macros into new header.  Add function prototypes.
	* src/Makefile.am (live_f1_SOURCES): Add packet.c and packet.h.

	* src/stream.c (parse_stream_block): Rename len parameter to
	buf_len to be more clear, iterate over the packets in the buffer
	using a static array so we can survive packets happening across
	boundaries.
	(next_packet): Take the next packet off the buffer and add it to
	parse_stream_block()s static buffer until we have a full-sized
	event that can be processed.
	(PACKET_CAR, PACKET_TYPE): Macros to retrive the car index and
	packet type from the header.
	(SHORT_PACKET_DATA, SPECIAL_PACKET_DATA): Macros to retrieve any
	data that can be hidden in the spare space of the packet header.
	(SHORT_PACKET_NUL): Macro to check whether the short packet really
	has data or not.
	(LONG_PACKET_LEN, SHORT_PACKET_LEN, SPECIAL_PACKET_LEN): Macros
	to return the expected size of the full packet depending on
	type.
	(CarPacketType): enum of packet types discovered so far that are
	related to cars.
	(SystemPacketType): enum of packet types discovered so far that
	aren't related to cars, shares the same type space though.
	* src/stream.h: Update.
	* README: Update with information on the data stream format.

	* src/stream.c (read_stream): Poll the data stream file descriptor
	and deal with events, if after one second we haven't got any data
	from it, send it a ping to see whether that wakes it up.
	(parse_stream_block): Take an http_sess for obtaining key frames
	when we need to.
	(open_stream): Iterate the available addresses until we find one
	that works.
	* src/stream.h: Update.
	* src/http.c (obtain_key_frame): Pass our own session to
	parse_stream_block() in case it needs to get more key frames.
	Close the connection when done so we don't keep the server
	hanging.

	* src/stream.c (open_stream): Lookup the hostname in a hopefully
	protocol-independant manner and connect to the data stream port.
	* src/stream.h: Update.
	* src/main.c (main): Open the data stream socket.

	* src/main.c (main): Use localhost for the key frame data.
	* src/http.c (obtain_key_frame): Ensure a minimum of five digits
	for the key frame number by zero-padding.
	* README: Document key frames and what they mean to us.

	* src/main.c (info): Add function for easy printing.
	* src/http.c (obtain_decryption_key): Drop this function entirely.
	(obtain_cookie): Change from static to extern, it's useful to
	get the cookie early and keep it around.  Rename to
	obtain_auth_cookie.
	(obtain_key): Change from static to extern and change to directly
	return the key, we'll use 0 for a failure as that's also what'll
	happen on 404, etc. anyway.  Rename to obtain_decryption_key.
	(obtain_key_frame): Make a request for a key frame and hand parsing
	off to parse_stream_block().
	* src/http.h: Update.
	* src/main.c (main): Move session creation and teardown to here.
	* src/stream.c (parse_stream_block): Add stub function.
	* src/stream.h: Associated header file.
	* src/Makefile.am (live_f1_SOURCES): Add stream.c and stream.h.

	* src/http.c (obtain_decryption_key): Create a neon session and
	call obtain_cookie() and obtain_key() to do the necessary magic
	to obtain the decryption key for a race.
	(obtain_cookie): Perform a login request on the website to obtain
	the authorisation cookie.
	(parse_cookie_hdr): Parse the set-cookie header for the request
	to obtain it.
	(numlen): Inline to calculate the length of a number for sprintf.
	(obtain_key): Send the request to obtain the decryption key for
	a session giving the authorisation key as credentials to have it.
	(parse_key_body): Parse the body of the key request, storing
	hexadecimal digits in the key until we run out.
	* src/main.c (main): Initialise gettext and neon, stash the program
	name, also include some debugging code for now.
	* src/live-f1.h: Add main header file to declare generally useful
	things like program_name and gettext macros.
	* src/macros.h: Copy from my template.
	* src/gettext.h: Copy from gettext distribution.
	* src/Makefile.am (live_f1_SOURCES): Add htp.c, http.h and
	live-f1.h
	(AM_CPPFLAGS): Replace INCLUDES and DEFS with single modern variable.
	(LDADD): Added NEON_LIBS.
	* README: Document the technique for obtaining the decryption key.

	* configure.ac: Add check for neon using pkg-config. Remove a
	couple of bits left over from my template.

	* ChangeLog: Initial project infrastructure created.

